import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;


//시간복잡도에 간선 M의 영향력을 없애고 싶을때 사용
class Main {

	static int N, M;
	static int Answer;
	static int dist[][];
	static final int INF = Integer.MAX_VALUE;

	public static void Floyd_Warshall() {
		// k : 경유지, i : 시작점, j : 끝점
		for (int k = 0; k < N; k++) {
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					if (i == j || dist[i][k] == INF || dist[k][j] == INF)
						continue;
					if (dist[i][j] > dist[i][k] + dist[k][j]) {
						dist[i][j] = dist[i][k] + dist[k][j];
						dist[j][i] = dist[i][k] + dist[k][j];
					}
				}
			}
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		dist = new int[N][N];

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				dist[i][j] = (i == j) ? 0 : INF;
			}
		}

		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());

			dist[a - 1][b - 1] = dist[b - 1][a - 1] = 1;
		}
		br.close();

		Floyd_Warshall();

		int total = INF;
		Answer = 0;
		for (int i = 0; i < N; i++) {
			int sum = 0;
			for (int j = 0; j < N; j++) {
				if (dist[i][j] == INF)
					continue;
				sum += dist[i][j];
			}
			if (total > sum) {
				Answer = i + 1;
				total = sum;
			}
		}
		System.out.println(Answer);
	}
}
