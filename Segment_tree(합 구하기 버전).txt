import java.util.Arrays;
import java.util.Queue;
import java.util.LinkedList;
import java.util.Scanner;

public class Main {

	static int N, M, K;
	static int arr[];
	static long segment_arr[];

	// node : segment_arr index
	public static long init(int left, int right, int node) {

		if (left == right) {
			return segment_arr[node] = arr[left];
		}

		int mid = (left + right) / 2;

		segment_arr[node] += init(left, mid, node * 2);
		segment_arr[node] += init(mid + 1, right, node * 2 + 1);

		return segment_arr[node];
	}

	// left, right : 원하는 구간 nodeLeft,nodeRight : 노드의 구간
	public static long Query(int left, int right, int node, int nodeLeft, int nodeRight) {

		// 공집합
		if (right < nodeLeft || nodeRight < left)
			return 0;
		//노드의 구간이 원하는 구간안에 완전히 포함되는 경우
		if (left <= nodeLeft && nodeRight <= right)
			return segment_arr[node];

		int mid = (nodeLeft + nodeRight) / 2;

		return Query(left, right, node * 2, nodeLeft, mid) + Query(left, right, node * 2 + 1, mid + 1, nodeRight);

	}

	public static long Update(int index, int newValue, int node, int nodeLeft, int nodeRight) {
		//Update 하고자하는 index값이 범위 밖에 있다면 해당 노드는 변화없이 return한다.
		if (index < nodeLeft || index > nodeRight)
			return segment_arr[node];

		//Update 범위가 같아지면 해당 node값을 새로운 값으로 바꾸어 return한다.
		if (nodeLeft == nodeRight)
			return segment_arr[node] = newValue;

		int mid = (nodeLeft + nodeRight) / 2;

		//갱신된 tree를 return 받아 현재 node를 갱신한다.
		return segment_arr[node] = Update(index, newValue, node * 2, nodeLeft, mid)
				+ Update(index, newValue, node * 2 + 1, mid + 1, nodeRight);

	}

	public static void main(String[] args) {
		int i;
		Scanner sc = new Scanner(System.in);
		N = sc.nextInt();
		M = sc.nextInt();
		K = sc.nextInt();

		arr = new int[N];
		Queue<Long> ans = new LinkedList<Long>();
		int arrSize = arr.length;
		segment_arr = new long[arrSize * 4];

		for (i = 0; i < N; i++) {
			arr[i] = sc.nextInt();
		}

		init(0, arrSize - 1, 1);

		for (i = 0; i < M + K; i++) {
			int a = sc.nextInt();
			int b = sc.nextInt();
			int c = sc.nextInt();

			if (a == 1)
				Update(b - 1, c, 1, 0, arrSize - 1);
			else if (a == 2)
				ans.offer(Query(b, c, 1, 1, arrSize));
		}

		sc.close();

		while (!ans.isEmpty()) {
			System.out.println(ans.poll());
		}
	}

}
