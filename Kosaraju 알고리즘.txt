
//Kosaraju

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.StringTokenizer;

class Main {

	static int V, E, count_SCC;
	static int Answer;
	static ArrayList<Integer> list[];
	static ArrayList<Integer> reverse_list[];
	static Stack<Integer> stack;
	static ArrayList<PriorityQueue<Integer>> SCC;
	static boolean Visited[];

	public static void DFS(int index) {

		for (int next : list[index]) {
			if (!Visited[next]) {
				Visited[next] = true;
				DFS(next);
			}
		}
		stack.push(index);
		return;
	}

	public static void R_DFS(int index) {

		for (int next : reverse_list[index]) {
			if (!Visited[next]) {
				Visited[next] = true;
				R_DFS(next);
			}
		}
		SCC.get(count_SCC).offer(index);
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		V = Integer.parseInt(st.nextToken());
		E = Integer.parseInt(st.nextToken());

		list = new ArrayList[V + 1];
		reverse_list = new ArrayList[V + 1];
		stack = new Stack<Integer>();
		Visited = new boolean[V + 1];

		SCC = new ArrayList<PriorityQueue<Integer>>();

		for (int i = 0; i <= V; i++) {
			list[i] = new ArrayList<Integer>();
			reverse_list[i] = new ArrayList<Integer>();
		}

		for (int i = 0; i < E; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());

			list[a].add(b);
			reverse_list[b].add(a);
		}
		for (int i = 1; i <= V; i++) {
			if (!Visited[i]) {
				Visited[i] = true;
				DFS(i);
			}
		}
		Arrays.fill(Visited, false);

		count_SCC = 0;
		int L = stack.size();
		for (int i = 0; i < L; i++) {
			int index = stack.pop();
			if (!Visited[index]) {
				Visited[index] = true;
				SCC.add(new PriorityQueue<Integer>());
				R_DFS(index);
				++count_SCC;
			}
		}

		Collections.sort(SCC, new Comparator<PriorityQueue<Integer>>() {
			@Override
			public int compare(PriorityQueue<Integer> P1, PriorityQueue<Integer> P2) {
				// TODO Auto-generated method stub
				return P2.peek() > P1.peek() ? -1 : 1;
			}
		});

		System.out.println(SCC.size());
		for (int i = 0; i < SCC.size(); i++) {
			while (!SCC.get(i).isEmpty()) {
				System.out.print(SCC.get(i).poll() + " ");
			}
			System.out.println(-1);
		}
	}
}
