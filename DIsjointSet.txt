/* 경로 압축시
 find : log(n)
   union : log(n)
*/  

import java.io.IOException;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.Scanner;

class Elements implements Comparable<Elements>{
	int v,u,d;
	Elements(int v, int u, int d){
		this.v=v;
		this.u=u;
		this.d=d;
	}
	public int compareTo(Elements e){
		return e.d >= d ? -1 : 1;
	}
}

public class Main {
	
    static int N,M;
	static PriorityQueue<Elements> pq;
	static int Parents [];
	static int Rank[];
	static int ans = 0;
	
	public static int Find(int x){
		if(x == Parents[x])
			return x;
		else
			return Find(Parents[x]);
	}
	
	public static void KruskalMST(){
        int cnt = 0;
		while(!pq.isEmpty()){
			int X = Find(pq.peek().v);
			int Y = Find(pq.peek().u);
			int D = pq.peek().d;
			pq.poll();
			
			if(X==Y)	//사이클에 포함된 경로
				continue;
			
			if(Rank[X] > Rank[Y]){
				int temp = X;
				X=Y;
				Y=temp;
			}
			
			if(Rank[X]==Rank[Y])
				++Rank[Y];
				
			Parents[X] = Y;
			ans+=D;
			 
            if(++cnt == N-2)
                break;
		}
	}

    public static void main(String[] args) throws IOException {
    	int i;
    	Scanner sc = new Scanner(System.in);
    	N = sc.nextInt();
    	M = sc.nextInt();
    	
    	pq = new PriorityQueue<Elements>();
    	Parents = new int[N+1];
    	Rank = new int[N+1];
    
    	
    	for(i=1;i<=N;i++){ //Parents 초기화
    		Parents[i] = i;
    	}
    	
    	Arrays.fill(Rank, 0);
    	
    	for(i=0;i<M;i++){
    		int v = sc.nextInt();
    		int u = sc.nextInt();
    		int d = sc.nextInt();
    		pq.offer(new Elements(v,u,d));
    	}
    	KruskalMST();
    	System.out.println(ans);
    }
}
